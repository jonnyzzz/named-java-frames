package org.jonnyzzz.stack;

import com.sun.istack.internal.NotNull;
import org.jonnyzzz.stack.impl.InternalAction;
import org.jonnyzzz.stack.impl.NamedExecutor;
import org.jonnyzzz.stack.impl.NamedExecutorImpl;

/**
 * @author Eugene Petrenko (eugene.petrenko@gmail.com)
 */
public class StackLine {
    public static <E extends Throwable> void stackLine(@NotNull final String name,
                                                       @NotNull final Class<E> exception,
                                                       @NotNull final UnderStackAction<E> fun) throws E {

        try {
            executor(name).execute(new InternalAction() {
                public Object execute() throws Throwable {
                    fun.execute();
                    return null;
                }
            });
        } catch (Throwable throwable) {
            if (exception.isInstance(throwable)) {
                throw exception.cast(throwable);
            } else {
                throw new RuntimeException(throwable);
            }
        }
    }


    public static <R, E extends Throwable> void stackLine(@NotNull final String name,
                                                          @NotNull final Class<E> exception,
                                                          @NotNull final UnderStackFunction<R, E> fun) throws E {
        try {
            executor(name).execute(new InternalAction() {
                public Object execute() throws Throwable {
                    fun.execute();
                    return null;
                }
            });
        } catch (Throwable throwable) {
            if (exception.isInstance(throwable)) {
                throw exception.cast(throwable);
            } else {
                throw new RuntimeException(throwable);
            }
        }
    }

    public interface UnderStackAction<E extends Throwable> {
        void execute() throws E;
    }

    public interface UnderStackFunction<R, E extends Throwable> {
        R execute() throws E;
    }


    @NotNull
    private static NamedExecutor executor(@NotNull final String name) {
        return new NamedExecutorImpl();
    }


    @NotNull
    private static byte[] generateClass(@NotNull final String className,
                                        @NotNull final String packageName) {
        return new byte[]{
                (byte) 0xca, (byte) 0xfe, (byte) 0xba, (byte) 0xbe,
                0x0, 0x0, 0x0, 0x33, //version
                0x0, 0x22, //constants pool : 33 entry
                0xa, 0x0, 0x4, 0x0, 0x1a, //CONSTANT_Methodref, class_index, name_any_type_index
                0xb, 0x0, 0xf, 0x0, 0x1b, //CONSTANT_InterfaceMethodref, class_index, name_any_type_index
                0x7, 0x0, 0x1d,           //CONSTANT_Class, name_index
                0x7, 0x0, 0x1e,           //CONSTANT_Class, name_index
                0x1, 0x0, 0x6, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, ///CONSTANT_Utf8, u2 size, UTF-8
                0x1, 0x0, 0x3, 0x28, 0x29, 0x56,
                0x1, 0x0, 0x4, 0x43, 0x6f, 0x64, 0x65,
                0x1, 0x0, 0xf, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
                0x1, 0x0, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
                0x1, 0x0, 0x4, 0x74, 0x68, 0x69, 0x73,
                0x1, 0x0, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
                0x1, 0x0, 0xc, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
                0x1, 0x0, 0x29, 0x4c, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53, 0x74,
                /*--*/          0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x24, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45,
                /*--*/          0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3b,
                0x1, 0x0, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
                0x7, 0x0, 0x1f, //CONSTANT_Class, name_index
                0x1, 0x0, 0xe, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
                0x1, 0x0, 0x2a, 0x28, 0x4c, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53,
                /*--*/          0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
                /*--*/          0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x29, 0x56,
                0x1, 0x0, 0x6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
                0x1, 0x0, 0x27, 0x4c, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53, 0x74,
                /*--*/          0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
                /*--*/          0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b,
                0x1, 0x0, 0xa, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
                0x7, 0x0, 0x20, //CONSTANT_Class, name_index
                0x1, 0x0, 0x24, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
                /*--*/          0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
                /*--*/          0x69, 0x6f, 0x6e, 0x73,
                0x1, 0x0, 0x21, 0x4c, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6e, 0x2f, 0x69, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f,
                /*--*/          0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
                /*--*/          0x3b,
                0x1, 0x0, 0xa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
                0x1, 0x0, 0xe, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x6a, 0x61, 0x76, 0x61,
                0xc, 0x0, 0x5, 0x0, 0x6, //CONSTANT_NameAndType u2 name_index u2 descriptor_index
                0xc, 0x0, 0xe, 0x0, 0x6, //CONSTANT_NameAndType u2 name_index u2 descriptor_index
                0x7, 0x0, 0x21,          //CONSTANT_Class, name_index
                0x1, 0x0, 0x27, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53, 0x74, 0x61,
                /*--*/          0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x24, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
                /*--*/          0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
                0x1, 0x0, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
                0x1, 0x0, 0x25, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53, 0x74, 0x61,
                /*--*/          0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
                /*--*/          0x63, 0x74, 0x69, 0x6f, 0x6e,
                0x1, 0x0, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x61,
                /*--*/          0x62, 0x6c, 0x65,
                0x1, 0x0, 0x16, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x6f, 0x6e, 0x6e, 0x79, 0x7a, 0x7a, 0x7a, 0x2f, 0x53, 0x74, 0x61,
                /*--*/          0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65,
                /**end of constants table */
                0x0, 0x21, //access flags
                0x0, 0x3, //this class
                0x0, 0x4, //super class
                0x0, 0x0, //interfaces count + data
                0x0, 0x0, //fields count + data
                0x0, 0x2, //methods count
                /* method info*/
                0x0, 0x1, //access_flags ACC_PUBLIC
                0x0, 0x5, //name index
                0x0, 0x6, //descriptor index
                0x0, 0x1, //attributes count
                /** method info : attribute info */
                0x0, 0x7, //attribute name index
                0x0, 0x0, 0x0, 0x2f,//attribute length
                0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x2a, (byte) 0xb7, 0x0, 0x1, (byte) 0xb1, 0x0, 0x0, 0x0,
                /*---*/   0x2, 0x0, 0x8, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x9, 0x0,
                /*---*/   0x0, 0x0, 0xc, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0xa, 0x0, 0xd, 0x0, 0x0,
                /* end attributes */
                0x0, 0x9,  //access_flags
                0x0, 0xe,  //name index
                0x0, 0x11, //descriptor index
                0x0, 0x3,  //attributes count
                /* attribute */
                0x0, 0x7,
                0x0, 0x0, 0x0, 0x35,
                0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x7, 0x2a, (byte) 0xb9, 0x0, 0x2, 0x1, 0x0, (byte) 0xb1, 0x0,
                /*---*/ 0x0, 0x0, 0x2, 0x0, 0x8, 0x0, 0x0, 0x0, 0xa, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1a, 0x0,
                /*---*/ 0x6, 0x0, 0x1b, 0x0, 0x9, 0x0, 0x0, 0x0, 0xc, 0x0, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0,
                /*---*/ 0x12, 0x0, 0x13, 0x0, 0x0,
                /* attribute */
                0x0, 0x14,
                0x0, 0x0, 0x0, 0x4,
                0x0, 0x1, 0x0, 0x15,
                /* attribute */
                0x0, 0x16,
                0x0, 0x0, 0x0, 0x7,
                0x1, 0x0, 0x1, 0x0, 0x17, 0x0, 0x0,
                /*end methods */
                /*class attributes*/
                0x0, 0x2, //attribute count
                /*attribute*/
                0x0, 0x18,
                0x0, 0x0, 0x0, 0x2,
                0x0, 0x19,
                /*attribute*/
                0x0, 0xc,
                0x0, 0x0, 0x0, 0x12,
                0x0, 0x2, 0x0, 0x3, 0x0, 0x1c, 0x0, 0xb, 0x0, 0x9, 0x0, 0xf, 0x0, 0x1c, 0x0, 0x10,
                /*---*/ 0x6, 0x9,
        };
    }
}
